/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/BasicRobotInfos.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_BASICROBOTINFOS_H
#define CORE_COMMUNICATION_SRVS_SERVICE_BASICROBOTINFOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace core_communication_srvs
{
template <class ContainerAllocator>
struct BasicRobotInfosRequest_ {
  typedef BasicRobotInfosRequest_<ContainerAllocator> Type;

  BasicRobotInfosRequest_()
  : getInfos(false)
  {
  }

  BasicRobotInfosRequest_(const ContainerAllocator& _alloc)
  : getInfos(false)
  {
  }

  typedef uint8_t _getInfos_type;
  uint8_t getInfos;


  typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BasicRobotInfosRequest
typedef  ::core_communication_srvs::BasicRobotInfosRequest_<std::allocator<void> > BasicRobotInfosRequest;

typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosRequest> BasicRobotInfosRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosRequest const> BasicRobotInfosRequestConstPtr;


template <class ContainerAllocator>
struct BasicRobotInfosResponse_ {
  typedef BasicRobotInfosResponse_<ContainerAllocator> Type;

  BasicRobotInfosResponse_()
  : numberActuatedJoints(0)
  , robotName()
  , robotType()
  , connectedSlaves()
  {
  }

  BasicRobotInfosResponse_(const ContainerAllocator& _alloc)
  : numberActuatedJoints(0)
  , robotName(_alloc)
  , robotType(_alloc)
  , connectedSlaves(_alloc)
  {
  }

  typedef uint32_t _numberActuatedJoints_type;
  uint32_t numberActuatedJoints;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robotName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  robotName;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robotType_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  robotType;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _connectedSlaves_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  connectedSlaves;


  typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BasicRobotInfosResponse
typedef  ::core_communication_srvs::BasicRobotInfosResponse_<std::allocator<void> > BasicRobotInfosResponse;

typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosResponse> BasicRobotInfosResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::BasicRobotInfosResponse const> BasicRobotInfosResponseConstPtr;

struct BasicRobotInfos
{

typedef BasicRobotInfosRequest Request;
typedef BasicRobotInfosResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BasicRobotInfos
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0dec2be412f0648801b2f31f793de0b7";
  }

  static const char* value(const  ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0dec2be412f06488ULL;
  static const uint64_t static_value2 = 0x01b2f31f793de0b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicRobotInfosRequest";
  }

  static const char* value(const  ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool getInfos\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "015d30a1313566844e09d064bf3a35af";
  }

  static const char* value(const  ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x015d30a131356684ULL;
  static const uint64_t static_value2 = 0x4e09d064bf3a35afULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicRobotInfosResponse";
  }

  static const char* value(const  ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
uint32 numberActuatedJoints\n\
string robotName\n\
string robotType\n\
string[] connectedSlaves\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.getInfos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BasicRobotInfosRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.numberActuatedJoints);
    stream.next(m.robotName);
    stream.next(m.robotType);
    stream.next(m.connectedSlaves);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BasicRobotInfosResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::BasicRobotInfos> {
  static const char* value() 
  {
    return "a60e479376a3eea574c9047f2b72168d";
  }

  static const char* value(const core_communication_srvs::BasicRobotInfos&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::BasicRobotInfos> {
  static const char* value() 
  {
    return "core_communication_srvs/BasicRobotInfos";
  }

  static const char* value(const core_communication_srvs::BasicRobotInfos&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a60e479376a3eea574c9047f2b72168d";
  }

  static const char* value(const core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicRobotInfos";
  }

  static const char* value(const core_communication_srvs::BasicRobotInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a60e479376a3eea574c9047f2b72168d";
  }

  static const char* value(const core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicRobotInfos";
  }

  static const char* value(const core_communication_srvs::BasicRobotInfosResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_BASICROBOTINFOS_H

