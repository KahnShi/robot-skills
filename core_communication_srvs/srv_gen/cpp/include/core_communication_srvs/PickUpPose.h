/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/PickUpPose.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_PICKUPPOSE_H
#define CORE_COMMUNICATION_SRVS_SERVICE_PICKUPPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Pose.h"

namespace core_communication_srvs
{
template <class ContainerAllocator>
struct PickUpPoseRequest_ {
  typedef PickUpPoseRequest_<ContainerAllocator> Type;

  PickUpPoseRequest_()
  {
  }

  PickUpPoseRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PickUpPoseRequest
typedef  ::core_communication_srvs::PickUpPoseRequest_<std::allocator<void> > PickUpPoseRequest;

typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseRequest> PickUpPoseRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseRequest const> PickUpPoseRequestConstPtr;


template <class ContainerAllocator>
struct PickUpPoseResponse_ {
  typedef PickUpPoseResponse_<ContainerAllocator> Type;

  PickUpPoseResponse_()
  : pickUpPose()
  {
  }

  PickUpPoseResponse_(const ContainerAllocator& _alloc)
  : pickUpPose(_alloc)
  {
  }

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pickUpPose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pickUpPose;


  typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PickUpPoseResponse
typedef  ::core_communication_srvs::PickUpPoseResponse_<std::allocator<void> > PickUpPoseResponse;

typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseResponse> PickUpPoseResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::PickUpPoseResponse const> PickUpPoseResponseConstPtr;

struct PickUpPose
{

typedef PickUpPoseRequest Request;
typedef PickUpPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PickUpPose
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/PickUpPoseRequest";
  }

  static const char* value(const  ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7eb78993106bbc56ce51866c24210bdf";
  }

  static const char* value(const  ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7eb78993106bbc56ULL;
  static const uint64_t static_value2 = 0xce51866c24210bdfULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/PickUpPoseResponse";
  }

  static const char* value(const  ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/Pose pickUpPose\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PickUpPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pickUpPose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PickUpPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::PickUpPose> {
  static const char* value() 
  {
    return "7eb78993106bbc56ce51866c24210bdf";
  }

  static const char* value(const core_communication_srvs::PickUpPose&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::PickUpPose> {
  static const char* value() 
  {
    return "core_communication_srvs/PickUpPose";
  }

  static const char* value(const core_communication_srvs::PickUpPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7eb78993106bbc56ce51866c24210bdf";
  }

  static const char* value(const core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/PickUpPose";
  }

  static const char* value(const core_communication_srvs::PickUpPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7eb78993106bbc56ce51866c24210bdf";
  }

  static const char* value(const core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/PickUpPose";
  }

  static const char* value(const core_communication_srvs::PickUpPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_PICKUPPOSE_H

