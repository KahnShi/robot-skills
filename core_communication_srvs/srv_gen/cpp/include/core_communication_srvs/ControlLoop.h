/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/ControlLoop.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_CONTROLLOOP_H
#define CORE_COMMUNICATION_SRVS_SERVICE_CONTROLLOOP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "core_communication_msgs/ControlLoop.h"


#include "core_communication_msgs/ControlLoop.h"
#include "core_communication_msgs/ControlLoop.h"

namespace core_communication_srvs
{
template <class ContainerAllocator>
struct ControlLoopRequest_ {
  typedef ControlLoopRequest_<ContainerAllocator> Type;

  ControlLoopRequest_()
  : setControlLoop(false)
  , newControlLoop()
  {
  }

  ControlLoopRequest_(const ContainerAllocator& _alloc)
  : setControlLoop(false)
  , newControlLoop(_alloc)
  {
  }

  typedef uint8_t _setControlLoop_type;
  uint8_t setControlLoop;

  typedef  ::core_communication_msgs::ControlLoop_<ContainerAllocator>  _newControlLoop_type;
   ::core_communication_msgs::ControlLoop_<ContainerAllocator>  newControlLoop;


  typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlLoopRequest
typedef  ::core_communication_srvs::ControlLoopRequest_<std::allocator<void> > ControlLoopRequest;

typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopRequest> ControlLoopRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopRequest const> ControlLoopRequestConstPtr;


template <class ContainerAllocator>
struct ControlLoopResponse_ {
  typedef ControlLoopResponse_<ContainerAllocator> Type;

  ControlLoopResponse_()
  : controlLoops()
  , activeControlLoop()
  {
  }

  ControlLoopResponse_(const ContainerAllocator& _alloc)
  : controlLoops(_alloc)
  , activeControlLoop(_alloc)
  {
  }

  typedef std::vector< ::core_communication_msgs::ControlLoop_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::ControlLoop_<ContainerAllocator> >::other >  _controlLoops_type;
  std::vector< ::core_communication_msgs::ControlLoop_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::ControlLoop_<ContainerAllocator> >::other >  controlLoops;

  typedef  ::core_communication_msgs::ControlLoop_<ContainerAllocator>  _activeControlLoop_type;
   ::core_communication_msgs::ControlLoop_<ContainerAllocator>  activeControlLoop;


  typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlLoopResponse
typedef  ::core_communication_srvs::ControlLoopResponse_<std::allocator<void> > ControlLoopResponse;

typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopResponse> ControlLoopResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::ControlLoopResponse const> ControlLoopResponseConstPtr;

struct ControlLoop
{

typedef ControlLoopRequest Request;
typedef ControlLoopResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ControlLoop
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "32a144e334eb9a8d3ceba5ce3909af2c";
  }

  static const char* value(const  ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x32a144e334eb9a8dULL;
  static const uint64_t static_value2 = 0x3ceba5ce3909af2cULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ControlLoopRequest";
  }

  static const char* value(const  ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool setControlLoop\n\
core_communication_msgs/ControlLoop newControlLoop\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/ControlLoop\n\
string className\n\
string baseClassName\n\
string description\n\
int64 referenceId\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "047ea1a23e665c07d923b3d592375331";
  }

  static const char* value(const  ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x047ea1a23e665c07ULL;
  static const uint64_t static_value2 = 0xd923b3d592375331ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ControlLoopResponse";
  }

  static const char* value(const  ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
core_communication_msgs/ControlLoop[] controlLoops\n\
core_communication_msgs/ControlLoop activeControlLoop\n\
\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/ControlLoop\n\
string className\n\
string baseClassName\n\
string description\n\
int64 referenceId\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::ControlLoopRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.setControlLoop);
    stream.next(m.newControlLoop);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlLoopRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::ControlLoopResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.controlLoops);
    stream.next(m.activeControlLoop);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlLoopResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::ControlLoop> {
  static const char* value() 
  {
    return "07980c17b05613bcf2464741e7a30038";
  }

  static const char* value(const core_communication_srvs::ControlLoop&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::ControlLoop> {
  static const char* value() 
  {
    return "core_communication_srvs/ControlLoop";
  }

  static const char* value(const core_communication_srvs::ControlLoop&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::ControlLoopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "07980c17b05613bcf2464741e7a30038";
  }

  static const char* value(const core_communication_srvs::ControlLoopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::ControlLoopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ControlLoop";
  }

  static const char* value(const core_communication_srvs::ControlLoopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::ControlLoopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "07980c17b05613bcf2464741e7a30038";
  }

  static const char* value(const core_communication_srvs::ControlLoopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::ControlLoopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ControlLoop";
  }

  static const char* value(const core_communication_srvs::ControlLoopResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_CONTROLLOOP_H

