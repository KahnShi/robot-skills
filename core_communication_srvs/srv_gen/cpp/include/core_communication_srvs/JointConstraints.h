/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/JointConstraints.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_JOINTCONSTRAINTS_H
#define CORE_COMMUNICATION_SRVS_SERVICE_JOINTCONSTRAINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace core_communication_srvs
{
template <class ContainerAllocator>
struct JointConstraintsRequest_ {
  typedef JointConstraintsRequest_<ContainerAllocator> Type;

  JointConstraintsRequest_()
  {
  }

  JointConstraintsRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointConstraintsRequest
typedef  ::core_communication_srvs::JointConstraintsRequest_<std::allocator<void> > JointConstraintsRequest;

typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsRequest> JointConstraintsRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsRequest const> JointConstraintsRequestConstPtr;


template <class ContainerAllocator>
struct JointConstraintsResponse_ {
  typedef JointConstraintsResponse_<ContainerAllocator> Type;

  JointConstraintsResponse_()
  : qMin()
  , qMax()
  , qDotMax()
  , qDDotMax()
  , maxJointTorque()
  {
  }

  JointConstraintsResponse_(const ContainerAllocator& _alloc)
  : qMin(_alloc)
  , qMax(_alloc)
  , qDotMax(_alloc)
  , qDDotMax(_alloc)
  , maxJointTorque(_alloc)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qMin_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  qMin;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qMax_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  qMax;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qDotMax_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  qDotMax;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _qDDotMax_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  qDDotMax;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _maxJointTorque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  maxJointTorque;


  typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointConstraintsResponse
typedef  ::core_communication_srvs::JointConstraintsResponse_<std::allocator<void> > JointConstraintsResponse;

typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsResponse> JointConstraintsResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::JointConstraintsResponse const> JointConstraintsResponseConstPtr;

struct JointConstraints
{

typedef JointConstraintsRequest Request;
typedef JointConstraintsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct JointConstraints
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/JointConstraintsRequest";
  }

  static const char* value(const  ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f1d39aa250d6ca8b625d8f655b0d1503";
  }

  static const char* value(const  ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf1d39aa250d6ca8bULL;
  static const uint64_t static_value2 = 0x625d8f655b0d1503ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/JointConstraintsResponse";
  }

  static const char* value(const  ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64[] qMin\n\
float64[] qMax\n\
float64[] qDotMax\n\
float64[] qDDotMax\n\
float64[] maxJointTorque\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointConstraintsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.qMin);
    stream.next(m.qMax);
    stream.next(m.qDotMax);
    stream.next(m.qDDotMax);
    stream.next(m.maxJointTorque);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointConstraintsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::JointConstraints> {
  static const char* value() 
  {
    return "f1d39aa250d6ca8b625d8f655b0d1503";
  }

  static const char* value(const core_communication_srvs::JointConstraints&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::JointConstraints> {
  static const char* value() 
  {
    return "core_communication_srvs/JointConstraints";
  }

  static const char* value(const core_communication_srvs::JointConstraints&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f1d39aa250d6ca8b625d8f655b0d1503";
  }

  static const char* value(const core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/JointConstraints";
  }

  static const char* value(const core_communication_srvs::JointConstraintsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f1d39aa250d6ca8b625d8f655b0d1503";
  }

  static const char* value(const core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/JointConstraints";
  }

  static const char* value(const core_communication_srvs::JointConstraintsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_JOINTCONSTRAINTS_H

