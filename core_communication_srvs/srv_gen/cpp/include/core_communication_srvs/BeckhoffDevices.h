/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/BeckhoffDevices.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_BECKHOFFDEVICES_H
#define CORE_COMMUNICATION_SRVS_SERVICE_BECKHOFFDEVICES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "core_communication_msgs/BeckhoffTerminalDescription.h"

namespace core_communication_srvs
{
template <class ContainerAllocator>
struct BeckhoffDevicesRequest_ {
  typedef BeckhoffDevicesRequest_<ContainerAllocator> Type;

  BeckhoffDevicesRequest_()
  {
  }

  BeckhoffDevicesRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BeckhoffDevicesRequest
typedef  ::core_communication_srvs::BeckhoffDevicesRequest_<std::allocator<void> > BeckhoffDevicesRequest;

typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesRequest> BeckhoffDevicesRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesRequest const> BeckhoffDevicesRequestConstPtr;


template <class ContainerAllocator>
struct BeckhoffDevicesResponse_ {
  typedef BeckhoffDevicesResponse_<ContainerAllocator> Type;

  BeckhoffDevicesResponse_()
  : numTerminals(0)
  , terminals()
  {
  }

  BeckhoffDevicesResponse_(const ContainerAllocator& _alloc)
  : numTerminals(0)
  , terminals(_alloc)
  {
  }

  typedef int32_t _numTerminals_type;
  int32_t numTerminals;

  typedef std::vector< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> >::other >  _terminals_type;
  std::vector< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> >::other >  terminals;


  typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BeckhoffDevicesResponse
typedef  ::core_communication_srvs::BeckhoffDevicesResponse_<std::allocator<void> > BeckhoffDevicesResponse;

typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesResponse> BeckhoffDevicesResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::BeckhoffDevicesResponse const> BeckhoffDevicesResponseConstPtr;

struct BeckhoffDevices
{

typedef BeckhoffDevicesRequest Request;
typedef BeckhoffDevicesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BeckhoffDevices
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BeckhoffDevicesRequest";
  }

  static const char* value(const  ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "830b2a5efe896b0f1c78a87d9bd2d0af";
  }

  static const char* value(const  ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x830b2a5efe896b0fULL;
  static const uint64_t static_value2 = 0x1c78a87d9bd2d0afULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BeckhoffDevicesResponse";
  }

  static const char* value(const  ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int32 numTerminals\n\
core_communication_msgs/BeckhoffTerminalDescription[] terminals\n\
\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/BeckhoffTerminalDescription\n\
string terminal # terminal type\n\
uint32 position # relative position of the terminal in the EtherCAT bus (0-n)\n\
uint8 num_ports # number of ports on the terminal (0-n)\n\
BeckhoffPortDescription[] ports # port descriptions\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/BeckhoffPortDescription\n\
uint8 index\n\
string direction # 'in','out'\n\
string type # 'digital';'analog'\n\
string data_type # 'uint8' 'uint16' 'uint32' 'uint64'\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BeckhoffDevicesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.numTerminals);
    stream.next(m.terminals);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BeckhoffDevicesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::BeckhoffDevices> {
  static const char* value() 
  {
    return "830b2a5efe896b0f1c78a87d9bd2d0af";
  }

  static const char* value(const core_communication_srvs::BeckhoffDevices&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::BeckhoffDevices> {
  static const char* value() 
  {
    return "core_communication_srvs/BeckhoffDevices";
  }

  static const char* value(const core_communication_srvs::BeckhoffDevices&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "830b2a5efe896b0f1c78a87d9bd2d0af";
  }

  static const char* value(const core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BeckhoffDevices";
  }

  static const char* value(const core_communication_srvs::BeckhoffDevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "830b2a5efe896b0f1c78a87d9bd2d0af";
  }

  static const char* value(const core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BeckhoffDevices";
  }

  static const char* value(const core_communication_srvs::BeckhoffDevicesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_BECKHOFFDEVICES_H

