/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/GripperInfo.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_GRIPPERINFO_H
#define CORE_COMMUNICATION_SRVS_SERVICE_GRIPPERINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace core_communication_srvs
{
template <class ContainerAllocator>
struct GripperInfoRequest_ {
  typedef GripperInfoRequest_<ContainerAllocator> Type;

  GripperInfoRequest_()
  {
  }

  GripperInfoRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GripperInfoRequest
typedef  ::core_communication_srvs::GripperInfoRequest_<std::allocator<void> > GripperInfoRequest;

typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoRequest> GripperInfoRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoRequest const> GripperInfoRequestConstPtr;


template <class ContainerAllocator>
struct GripperInfoResponse_ {
  typedef GripperInfoResponse_<ContainerAllocator> Type;

  GripperInfoResponse_()
  : isGripperInstalled(false)
  , minimumOpening(0.0)
  , maximumOpening(0.0)
  , noMovementTimeout(0.0)
  {
  }

  GripperInfoResponse_(const ContainerAllocator& _alloc)
  : isGripperInstalled(false)
  , minimumOpening(0.0)
  , maximumOpening(0.0)
  , noMovementTimeout(0.0)
  {
  }

  typedef uint8_t _isGripperInstalled_type;
  uint8_t isGripperInstalled;

  typedef double _minimumOpening_type;
  double minimumOpening;

  typedef double _maximumOpening_type;
  double maximumOpening;

  typedef double _noMovementTimeout_type;
  double noMovementTimeout;


  typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GripperInfoResponse
typedef  ::core_communication_srvs::GripperInfoResponse_<std::allocator<void> > GripperInfoResponse;

typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoResponse> GripperInfoResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::GripperInfoResponse const> GripperInfoResponseConstPtr;

struct GripperInfo
{

typedef GripperInfoRequest Request;
typedef GripperInfoResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GripperInfo
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/GripperInfoRequest";
  }

  static const char* value(const  ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4483535ab2994ff7413bfbaa2fc66115";
  }

  static const char* value(const  ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4483535ab2994ff7ULL;
  static const uint64_t static_value2 = 0x413bfbaa2fc66115ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/GripperInfoResponse";
  }

  static const char* value(const  ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool isGripperInstalled\n\
float64 minimumOpening\n\
float64 maximumOpening\n\
float64 noMovementTimeout\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::GripperInfoRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GripperInfoRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::GripperInfoResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.isGripperInstalled);
    stream.next(m.minimumOpening);
    stream.next(m.maximumOpening);
    stream.next(m.noMovementTimeout);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GripperInfoResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::GripperInfo> {
  static const char* value() 
  {
    return "4483535ab2994ff7413bfbaa2fc66115";
  }

  static const char* value(const core_communication_srvs::GripperInfo&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::GripperInfo> {
  static const char* value() 
  {
    return "core_communication_srvs/GripperInfo";
  }

  static const char* value(const core_communication_srvs::GripperInfo&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4483535ab2994ff7413bfbaa2fc66115";
  }

  static const char* value(const core_communication_srvs::GripperInfoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::GripperInfoRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/GripperInfo";
  }

  static const char* value(const core_communication_srvs::GripperInfoRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4483535ab2994ff7413bfbaa2fc66115";
  }

  static const char* value(const core_communication_srvs::GripperInfoResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::GripperInfoResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/GripperInfo";
  }

  static const char* value(const core_communication_srvs::GripperInfoResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_GRIPPERINFO_H

