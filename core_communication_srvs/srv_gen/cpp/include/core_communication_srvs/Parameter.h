/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/Parameter.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_PARAMETER_H
#define CORE_COMMUNICATION_SRVS_SERVICE_PARAMETER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "core_communication_msgs/Parameter.h"


#include "core_communication_msgs/Parameter.h"

namespace core_communication_srvs
{
template <class ContainerAllocator>
struct ParameterRequest_ {
  typedef ParameterRequest_<ContainerAllocator> Type;

  ParameterRequest_()
  : setParameter(false)
  , parameters()
  {
  }

  ParameterRequest_(const ContainerAllocator& _alloc)
  : setParameter(false)
  , parameters(_alloc)
  {
  }

  typedef uint8_t _setParameter_type;
  uint8_t setParameter;

  typedef std::vector< ::core_communication_msgs::Parameter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::Parameter_<ContainerAllocator> >::other >  _parameters_type;
  std::vector< ::core_communication_msgs::Parameter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::Parameter_<ContainerAllocator> >::other >  parameters;


  typedef boost::shared_ptr< ::core_communication_srvs::ParameterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::ParameterRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ParameterRequest
typedef  ::core_communication_srvs::ParameterRequest_<std::allocator<void> > ParameterRequest;

typedef boost::shared_ptr< ::core_communication_srvs::ParameterRequest> ParameterRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::ParameterRequest const> ParameterRequestConstPtr;


template <class ContainerAllocator>
struct ParameterResponse_ {
  typedef ParameterResponse_<ContainerAllocator> Type;

  ParameterResponse_()
  : parameters()
  {
  }

  ParameterResponse_(const ContainerAllocator& _alloc)
  : parameters(_alloc)
  {
  }

  typedef std::vector< ::core_communication_msgs::Parameter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::Parameter_<ContainerAllocator> >::other >  _parameters_type;
  std::vector< ::core_communication_msgs::Parameter_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::Parameter_<ContainerAllocator> >::other >  parameters;


  typedef boost::shared_ptr< ::core_communication_srvs::ParameterResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::ParameterResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ParameterResponse
typedef  ::core_communication_srvs::ParameterResponse_<std::allocator<void> > ParameterResponse;

typedef boost::shared_ptr< ::core_communication_srvs::ParameterResponse> ParameterResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::ParameterResponse const> ParameterResponseConstPtr;

struct Parameter
{

typedef ParameterRequest Request;
typedef ParameterResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Parameter
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ParameterRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ParameterRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::ParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e60560d4cc8c8d89596a2a686832381b";
  }

  static const char* value(const  ::core_communication_srvs::ParameterRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe60560d4cc8c8d89ULL;
  static const uint64_t static_value2 = 0x596a2a686832381bULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::ParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ParameterRequest";
  }

  static const char* value(const  ::core_communication_srvs::ParameterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::ParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool setParameter\n\
core_communication_msgs/Parameter[] parameters\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/Parameter\n\
int32 parameterId\n\
int32 collectionId\n\
string parameterDescription\n\
string collectionDescription\n\
string parentClass\n\
bool editable\n\
string type\n\
string value\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::ParameterRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ParameterResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ParameterResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::ParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b18527cb69fbbc2994620704bbd122f";
  }

  static const char* value(const  ::core_communication_srvs::ParameterResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b18527cb69fbbc2ULL;
  static const uint64_t static_value2 = 0x994620704bbd122fULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::ParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ParameterResponse";
  }

  static const char* value(const  ::core_communication_srvs::ParameterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::ParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
core_communication_msgs/Parameter[] parameters\n\
\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/Parameter\n\
int32 parameterId\n\
int32 collectionId\n\
string parameterDescription\n\
string collectionDescription\n\
string parentClass\n\
bool editable\n\
string type\n\
string value\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::ParameterResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::ParameterRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.setParameter);
    stream.next(m.parameters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ParameterRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::ParameterResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.parameters);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ParameterResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::Parameter> {
  static const char* value() 
  {
    return "1b63760e10a11c083c8e6fc882a2639d";
  }

  static const char* value(const core_communication_srvs::Parameter&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::Parameter> {
  static const char* value() 
  {
    return "core_communication_srvs/Parameter";
  }

  static const char* value(const core_communication_srvs::Parameter&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::ParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b63760e10a11c083c8e6fc882a2639d";
  }

  static const char* value(const core_communication_srvs::ParameterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::ParameterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/Parameter";
  }

  static const char* value(const core_communication_srvs::ParameterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::ParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1b63760e10a11c083c8e6fc882a2639d";
  }

  static const char* value(const core_communication_srvs::ParameterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::ParameterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/Parameter";
  }

  static const char* value(const core_communication_srvs::ParameterResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_PARAMETER_H

