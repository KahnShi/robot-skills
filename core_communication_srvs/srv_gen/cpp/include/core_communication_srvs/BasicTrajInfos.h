/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/BasicTrajInfos.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_BASICTRAJINFOS_H
#define CORE_COMMUNICATION_SRVS_SERVICE_BASICTRAJINFOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace core_communication_srvs
{
template <class ContainerAllocator>
struct BasicTrajInfosRequest_ {
  typedef BasicTrajInfosRequest_<ContainerAllocator> Type;

  BasicTrajInfosRequest_()
  {
  }

  BasicTrajInfosRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BasicTrajInfosRequest
typedef  ::core_communication_srvs::BasicTrajInfosRequest_<std::allocator<void> > BasicTrajInfosRequest;

typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosRequest> BasicTrajInfosRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosRequest const> BasicTrajInfosRequestConstPtr;


template <class ContainerAllocator>
struct BasicTrajInfosResponse_ {
  typedef BasicTrajInfosResponse_<ContainerAllocator> Type;

  BasicTrajInfosResponse_()
  : cartReachingAccuracyFlyByPoint(0.0)
  , orientReachingAccuracyFlyByPoint(0.0)
  , cartReachingAccuracyStopPoint(0.0)
  , orientReachingAccuracyStopPoint(0.0)
  , jointReachingAccuracyStopPoint(0.0)
  , defaultEndeffectorVel(0.0)
  , defaultJointVel(0.0)
  {
  }

  BasicTrajInfosResponse_(const ContainerAllocator& _alloc)
  : cartReachingAccuracyFlyByPoint(0.0)
  , orientReachingAccuracyFlyByPoint(0.0)
  , cartReachingAccuracyStopPoint(0.0)
  , orientReachingAccuracyStopPoint(0.0)
  , jointReachingAccuracyStopPoint(0.0)
  , defaultEndeffectorVel(0.0)
  , defaultJointVel(0.0)
  {
  }

  typedef double _cartReachingAccuracyFlyByPoint_type;
  double cartReachingAccuracyFlyByPoint;

  typedef double _orientReachingAccuracyFlyByPoint_type;
  double orientReachingAccuracyFlyByPoint;

  typedef double _cartReachingAccuracyStopPoint_type;
  double cartReachingAccuracyStopPoint;

  typedef double _orientReachingAccuracyStopPoint_type;
  double orientReachingAccuracyStopPoint;

  typedef double _jointReachingAccuracyStopPoint_type;
  double jointReachingAccuracyStopPoint;

  typedef double _defaultEndeffectorVel_type;
  double defaultEndeffectorVel;

  typedef double _defaultJointVel_type;
  double defaultJointVel;


  typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BasicTrajInfosResponse
typedef  ::core_communication_srvs::BasicTrajInfosResponse_<std::allocator<void> > BasicTrajInfosResponse;

typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosResponse> BasicTrajInfosResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::BasicTrajInfosResponse const> BasicTrajInfosResponseConstPtr;

struct BasicTrajInfos
{

typedef BasicTrajInfosRequest Request;
typedef BasicTrajInfosResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct BasicTrajInfos
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicTrajInfosRequest";
  }

  static const char* value(const  ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4135fcce14a6de812c59d2a8b8b566a0";
  }

  static const char* value(const  ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4135fcce14a6de81ULL;
  static const uint64_t static_value2 = 0x2c59d2a8b8b566a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicTrajInfosResponse";
  }

  static const char* value(const  ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 cartReachingAccuracyFlyByPoint\n\
float64 orientReachingAccuracyFlyByPoint\n\
float64 cartReachingAccuracyStopPoint\n\
float64 orientReachingAccuracyStopPoint\n\
float64 jointReachingAccuracyStopPoint\n\
float64 defaultEndeffectorVel\n\
float64 defaultJointVel\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BasicTrajInfosRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cartReachingAccuracyFlyByPoint);
    stream.next(m.orientReachingAccuracyFlyByPoint);
    stream.next(m.cartReachingAccuracyStopPoint);
    stream.next(m.orientReachingAccuracyStopPoint);
    stream.next(m.jointReachingAccuracyStopPoint);
    stream.next(m.defaultEndeffectorVel);
    stream.next(m.defaultJointVel);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BasicTrajInfosResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::BasicTrajInfos> {
  static const char* value() 
  {
    return "4135fcce14a6de812c59d2a8b8b566a0";
  }

  static const char* value(const core_communication_srvs::BasicTrajInfos&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::BasicTrajInfos> {
  static const char* value() 
  {
    return "core_communication_srvs/BasicTrajInfos";
  }

  static const char* value(const core_communication_srvs::BasicTrajInfos&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4135fcce14a6de812c59d2a8b8b566a0";
  }

  static const char* value(const core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicTrajInfos";
  }

  static const char* value(const core_communication_srvs::BasicTrajInfosRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4135fcce14a6de812c59d2a8b8b566a0";
  }

  static const char* value(const core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/BasicTrajInfos";
  }

  static const char* value(const core_communication_srvs::BasicTrajInfosResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_BASICTRAJINFOS_H

