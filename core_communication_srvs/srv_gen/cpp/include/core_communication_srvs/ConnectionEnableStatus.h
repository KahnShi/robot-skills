/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/ConnectionEnableStatus.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_CONNECTIONENABLESTATUS_H
#define CORE_COMMUNICATION_SRVS_SERVICE_CONNECTIONENABLESTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace core_communication_srvs
{
template <class ContainerAllocator>
struct ConnectionEnableStatusRequest_ {
  typedef ConnectionEnableStatusRequest_<ContainerAllocator> Type;

  ConnectionEnableStatusRequest_()
  {
  }

  ConnectionEnableStatusRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ConnectionEnableStatusRequest
typedef  ::core_communication_srvs::ConnectionEnableStatusRequest_<std::allocator<void> > ConnectionEnableStatusRequest;

typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusRequest> ConnectionEnableStatusRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusRequest const> ConnectionEnableStatusRequestConstPtr;


template <class ContainerAllocator>
struct ConnectionEnableStatusResponse_ {
  typedef ConnectionEnableStatusResponse_<ContainerAllocator> Type;

  ConnectionEnableStatusResponse_()
  : isConnectionEstablished(false)
  , isRobotEnabled(false)
  {
  }

  ConnectionEnableStatusResponse_(const ContainerAllocator& _alloc)
  : isConnectionEstablished(false)
  , isRobotEnabled(false)
  {
  }

  typedef uint8_t _isConnectionEstablished_type;
  uint8_t isConnectionEstablished;

  typedef uint8_t _isRobotEnabled_type;
  uint8_t isRobotEnabled;


  typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ConnectionEnableStatusResponse
typedef  ::core_communication_srvs::ConnectionEnableStatusResponse_<std::allocator<void> > ConnectionEnableStatusResponse;

typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusResponse> ConnectionEnableStatusResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::ConnectionEnableStatusResponse const> ConnectionEnableStatusResponseConstPtr;

struct ConnectionEnableStatus
{

typedef ConnectionEnableStatusRequest Request;
typedef ConnectionEnableStatusResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ConnectionEnableStatus
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ConnectionEnableStatusRequest";
  }

  static const char* value(const  ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6dd3f44c2a7a09b518da55fa09ff3c5d";
  }

  static const char* value(const  ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6dd3f44c2a7a09b5ULL;
  static const uint64_t static_value2 = 0x18da55fa09ff3c5dULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ConnectionEnableStatusResponse";
  }

  static const char* value(const  ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool isConnectionEstablished\n\
bool isRobotEnabled\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ConnectionEnableStatusRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.isConnectionEstablished);
    stream.next(m.isRobotEnabled);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ConnectionEnableStatusResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::ConnectionEnableStatus> {
  static const char* value() 
  {
    return "6dd3f44c2a7a09b518da55fa09ff3c5d";
  }

  static const char* value(const core_communication_srvs::ConnectionEnableStatus&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::ConnectionEnableStatus> {
  static const char* value() 
  {
    return "core_communication_srvs/ConnectionEnableStatus";
  }

  static const char* value(const core_communication_srvs::ConnectionEnableStatus&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6dd3f44c2a7a09b518da55fa09ff3c5d";
  }

  static const char* value(const core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ConnectionEnableStatus";
  }

  static const char* value(const core_communication_srvs::ConnectionEnableStatusRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6dd3f44c2a7a09b518da55fa09ff3c5d";
  }

  static const char* value(const core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/ConnectionEnableStatus";
  }

  static const char* value(const core_communication_srvs::ConnectionEnableStatusResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_CONNECTIONENABLESTATUS_H

