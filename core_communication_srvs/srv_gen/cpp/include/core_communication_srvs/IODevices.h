/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_srvs/srv/IODevices.srv */
#ifndef CORE_COMMUNICATION_SRVS_SERVICE_IODEVICES_H
#define CORE_COMMUNICATION_SRVS_SERVICE_IODEVICES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace core_communication_srvs
{
template <class ContainerAllocator>
struct IODevicesRequest_ {
  typedef IODevicesRequest_<ContainerAllocator> Type;

  IODevicesRequest_()
  : getInfos(false)
  {
  }

  IODevicesRequest_(const ContainerAllocator& _alloc)
  : getInfos(false)
  {
  }

  typedef uint8_t _getInfos_type;
  uint8_t getInfos;


  typedef boost::shared_ptr< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IODevicesRequest
typedef  ::core_communication_srvs::IODevicesRequest_<std::allocator<void> > IODevicesRequest;

typedef boost::shared_ptr< ::core_communication_srvs::IODevicesRequest> IODevicesRequestPtr;
typedef boost::shared_ptr< ::core_communication_srvs::IODevicesRequest const> IODevicesRequestConstPtr;


template <class ContainerAllocator>
struct IODevicesResponse_ {
  typedef IODevicesResponse_<ContainerAllocator> Type;

  IODevicesResponse_()
  : id()
  , name()
  , value()
  {
  }

  IODevicesResponse_(const ContainerAllocator& _alloc)
  : id(_alloc)
  , name(_alloc)
  , value(_alloc)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _id_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  id;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  name;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _value_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  value;


  typedef boost::shared_ptr< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IODevicesResponse
typedef  ::core_communication_srvs::IODevicesResponse_<std::allocator<void> > IODevicesResponse;

typedef boost::shared_ptr< ::core_communication_srvs::IODevicesResponse> IODevicesResponsePtr;
typedef boost::shared_ptr< ::core_communication_srvs::IODevicesResponse const> IODevicesResponseConstPtr;

struct IODevices
{

typedef IODevicesRequest Request;
typedef IODevicesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct IODevices
} // namespace core_communication_srvs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0dec2be412f0648801b2f31f793de0b7";
  }

  static const char* value(const  ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0dec2be412f06488ULL;
  static const uint64_t static_value2 = 0x01b2f31f793de0b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/IODevicesRequest";
  }

  static const char* value(const  ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
bool getInfos\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "02b4d7c9c13e2bef2ac12c6d5bd7ab21";
  }

  static const char* value(const  ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x02b4d7c9c13e2befULL;
  static const uint64_t static_value2 = 0x2ac12c6d5bd7ab21ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/IODevicesResponse";
  }

  static const char* value(const  ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int32[] id\n\
string[] name\n\
float64[] value\n\
\n\
\n\
";
  }

  static const char* value(const  ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::IODevicesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.getInfos);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IODevicesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_srvs::IODevicesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.id);
    stream.next(m.name);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IODevicesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<core_communication_srvs::IODevices> {
  static const char* value() 
  {
    return "bc0d0bd77b3bfaa30313c0556944e01b";
  }

  static const char* value(const core_communication_srvs::IODevices&) { return value(); } 
};

template<>
struct DataType<core_communication_srvs::IODevices> {
  static const char* value() 
  {
    return "core_communication_srvs/IODevices";
  }

  static const char* value(const core_communication_srvs::IODevices&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::IODevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bc0d0bd77b3bfaa30313c0556944e01b";
  }

  static const char* value(const core_communication_srvs::IODevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::IODevicesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/IODevices";
  }

  static const char* value(const core_communication_srvs::IODevicesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<core_communication_srvs::IODevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bc0d0bd77b3bfaa30313c0556944e01b";
  }

  static const char* value(const core_communication_srvs::IODevicesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<core_communication_srvs::IODevicesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_srvs/IODevices";
  }

  static const char* value(const core_communication_srvs::IODevicesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CORE_COMMUNICATION_SRVS_SERVICE_IODEVICES_H

