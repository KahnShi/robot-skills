/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/BeckhoffDigitalSignal.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFDIGITALSIGNAL_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFDIGITALSIGNAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct BeckhoffDigitalSignal_ {
  typedef BeckhoffDigitalSignal_<ContainerAllocator> Type;

  BeckhoffDigitalSignal_()
  : terminal()
  , position(0)
  , port(0)
  , state(false)
  {
  }

  BeckhoffDigitalSignal_(const ContainerAllocator& _alloc)
  : terminal(_alloc)
  , position(0)
  , port(0)
  , state(false)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _terminal_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  terminal;

  typedef uint8_t _position_type;
  uint8_t position;

  typedef uint8_t _port_type;
  uint8_t port;

  typedef uint8_t _state_type;
  uint8_t state;


  typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BeckhoffDigitalSignal
typedef  ::core_communication_msgs::BeckhoffDigitalSignal_<std::allocator<void> > BeckhoffDigitalSignal;

typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffDigitalSignal> BeckhoffDigitalSignalPtr;
typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffDigitalSignal const> BeckhoffDigitalSignalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "86287f079e27c31f59c610d87337e525";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x86287f079e27c31fULL;
  static const uint64_t static_value2 = 0x59c610d87337e525ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/BeckhoffDigitalSignal";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains the state of a specific out or input on a Beckhoff terminal.\n\
string terminal # terminal type (e.g. EL1014)\n\
uint8 position # relative position of the terminal in the ethercat bus (0-n)\n\
uint8 port # specifies the port on the selected terminal (0-n)\n\
bool state # the state of the port\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.terminal);
    stream.next(m.position);
    stream.next(m.port);
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BeckhoffDigitalSignal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::BeckhoffDigitalSignal_<ContainerAllocator> & v) 
  {
    s << indent << "terminal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.terminal);
    s << indent << "position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position);
    s << indent << "port: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.port);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFDIGITALSIGNAL_H

