/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/robotInitialization.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_ROBOTINITIALIZATION_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_ROBOTINITIALIZATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct robotInitialization_ {
  typedef robotInitialization_<ContainerAllocator> Type;

  robotInitialization_()
  : connectDisconnectRobot(false)
  , enableDisableRobot(false)
  , resetMotorEncoder(false)
  , value(false)
  {
  }

  robotInitialization_(const ContainerAllocator& _alloc)
  : connectDisconnectRobot(false)
  , enableDisableRobot(false)
  , resetMotorEncoder(false)
  , value(false)
  {
  }

  typedef uint8_t _connectDisconnectRobot_type;
  uint8_t connectDisconnectRobot;

  typedef uint8_t _enableDisableRobot_type;
  uint8_t enableDisableRobot;

  typedef uint8_t _resetMotorEncoder_type;
  uint8_t resetMotorEncoder;

  typedef uint8_t _value_type;
  uint8_t value;


  typedef boost::shared_ptr< ::core_communication_msgs::robotInitialization_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::robotInitialization_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct robotInitialization
typedef  ::core_communication_msgs::robotInitialization_<std::allocator<void> > robotInitialization;

typedef boost::shared_ptr< ::core_communication_msgs::robotInitialization> robotInitializationPtr;
typedef boost::shared_ptr< ::core_communication_msgs::robotInitialization const> robotInitializationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::robotInitialization_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::robotInitialization_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::robotInitialization_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::robotInitialization_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::robotInitialization_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d3ae86cafc174b346dfc3efe19b7eb6";
  }

  static const char* value(const  ::core_communication_msgs::robotInitialization_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4d3ae86cafc174b3ULL;
  static const uint64_t static_value2 = 0x46dfc3efe19b7eb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::robotInitialization_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/robotInitialization";
  }

  static const char* value(const  ::core_communication_msgs::robotInitialization_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::robotInitialization_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool connectDisconnectRobot\n\
bool enableDisableRobot\n\
bool resetMotorEncoder\n\
bool value\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::robotInitialization_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_msgs::robotInitialization_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::robotInitialization_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.connectDisconnectRobot);
    stream.next(m.enableDisableRobot);
    stream.next(m.resetMotorEncoder);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct robotInitialization_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::robotInitialization_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::robotInitialization_<ContainerAllocator> & v) 
  {
    s << indent << "connectDisconnectRobot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connectDisconnectRobot);
    s << indent << "enableDisableRobot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enableDisableRobot);
    s << indent << "resetMotorEncoder: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.resetMotorEncoder);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_ROBOTINITIALIZATION_H

