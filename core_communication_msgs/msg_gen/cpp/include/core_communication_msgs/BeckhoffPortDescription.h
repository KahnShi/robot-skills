/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/BeckhoffPortDescription.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFPORTDESCRIPTION_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFPORTDESCRIPTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct BeckhoffPortDescription_ {
  typedef BeckhoffPortDescription_<ContainerAllocator> Type;

  BeckhoffPortDescription_()
  : index(0)
  , direction()
  , type()
  , data_type()
  {
  }

  BeckhoffPortDescription_(const ContainerAllocator& _alloc)
  : index(0)
  , direction(_alloc)
  , type(_alloc)
  , data_type(_alloc)
  {
  }

  typedef uint8_t _index_type;
  uint8_t index;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _direction_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  direction;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  type;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  data_type;


  typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BeckhoffPortDescription
typedef  ::core_communication_msgs::BeckhoffPortDescription_<std::allocator<void> > BeckhoffPortDescription;

typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffPortDescription> BeckhoffPortDescriptionPtr;
typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffPortDescription const> BeckhoffPortDescriptionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1cc2270438c99dd3bb000cdad7cb2748";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1cc2270438c99dd3ULL;
  static const uint64_t static_value2 = 0xbb000cdad7cb2748ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/BeckhoffPortDescription";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 index\n\
string direction # 'in','out'\n\
string type # 'digital';'analog'\n\
string data_type # 'uint8' 'uint16' 'uint32' 'uint64'\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.index);
    stream.next(m.direction);
    stream.next(m.type);
    stream.next(m.data_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BeckhoffPortDescription_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> & v) 
  {
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.direction);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "data_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data_type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFPORTDESCRIPTION_H

