/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/BioRobElectricalState.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBELECTRICALSTATE_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBELECTRICALSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace core_communication_msgs
{
template <class ContainerAllocator>
struct BioRobElectricalState_ {
  typedef BioRobElectricalState_<ContainerAllocator> Type;

  BioRobElectricalState_()
  : header()
  , motor_current()
  , motor_voltage()
  , system_current(0.0)
  , system_voltage(0.0)
  {
  }

  BioRobElectricalState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , motor_current(_alloc)
  , motor_voltage(_alloc)
  , system_current(0.0)
  , system_voltage(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_current_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  motor_current;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _motor_voltage_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  motor_voltage;

  typedef double _system_current_type;
  double system_current;

  typedef double _system_voltage_type;
  double system_voltage;


  typedef boost::shared_ptr< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BioRobElectricalState
typedef  ::core_communication_msgs::BioRobElectricalState_<std::allocator<void> > BioRobElectricalState;

typedef boost::shared_ptr< ::core_communication_msgs::BioRobElectricalState> BioRobElectricalStatePtr;
typedef boost::shared_ptr< ::core_communication_msgs::BioRobElectricalState const> BioRobElectricalStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "038244ccc107f157bdb3173935332698";
  }

  static const char* value(const  ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x038244ccc107f157ULL;
  static const uint64_t static_value2 = 0xbdb3173935332698ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/BioRobElectricalState";
  }

  static const char* value(const  ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Header header\n\
float64[] motor_current\n\
float64[] motor_voltage\n\
float64 system_current\n\
float64 system_voltage\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.motor_current);
    stream.next(m.motor_voltage);
    stream.next(m.system_current);
    stream.next(m.system_voltage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BioRobElectricalState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::BioRobElectricalState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motor_current[]" << std::endl;
    for (size_t i = 0; i < v.motor_current.size(); ++i)
    {
      s << indent << "  motor_current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_current[i]);
    }
    s << indent << "motor_voltage[]" << std::endl;
    for (size_t i = 0; i < v.motor_voltage.size(); ++i)
    {
      s << indent << "  motor_voltage[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.motor_voltage[i]);
    }
    s << indent << "system_current: ";
    Printer<double>::stream(s, indent + "  ", v.system_current);
    s << indent << "system_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.system_voltage);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBELECTRICALSTATE_H

