/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/TrajectorySpeedControl.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_TRAJECTORYSPEEDCONTROL_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_TRAJECTORYSPEEDCONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct TrajectorySpeedControl_ {
  typedef TrajectorySpeedControl_<ContainerAllocator> Type;

  TrajectorySpeedControl_()
  : scaleFactor(0.0)
  {
  }

  TrajectorySpeedControl_(const ContainerAllocator& _alloc)
  : scaleFactor(0.0)
  {
  }

  typedef double _scaleFactor_type;
  double scaleFactor;


  typedef boost::shared_ptr< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrajectorySpeedControl
typedef  ::core_communication_msgs::TrajectorySpeedControl_<std::allocator<void> > TrajectorySpeedControl;

typedef boost::shared_ptr< ::core_communication_msgs::TrajectorySpeedControl> TrajectorySpeedControlPtr;
typedef boost::shared_ptr< ::core_communication_msgs::TrajectorySpeedControl const> TrajectorySpeedControlConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8dd1b5d936925911458ab4b5dfaf2d5c";
  }

  static const char* value(const  ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8dd1b5d936925911ULL;
  static const uint64_t static_value2 = 0x458ab4b5dfaf2d5cULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/TrajectorySpeedControl";
  }

  static const char* value(const  ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 scaleFactor\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.scaleFactor);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajectorySpeedControl_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::TrajectorySpeedControl_<ContainerAllocator> & v) 
  {
    s << indent << "scaleFactor: ";
    Printer<double>::stream(s, indent + "  ", v.scaleFactor);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_TRAJECTORYSPEEDCONTROL_H

