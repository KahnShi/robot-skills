/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/RecordingExecutionCommands.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_RECORDINGEXECUTIONCOMMANDS_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_RECORDINGEXECUTIONCOMMANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct RecordingExecutionCommands_ {
  typedef RecordingExecutionCommands_<ContainerAllocator> Type;

  RecordingExecutionCommands_()
  : startRecording(false)
  , stopRecording(false)
  , saveRecording(false)
  , clearRecording(false)
  , successful(false)
  , savePath()
  {
  }

  RecordingExecutionCommands_(const ContainerAllocator& _alloc)
  : startRecording(false)
  , stopRecording(false)
  , saveRecording(false)
  , clearRecording(false)
  , successful(false)
  , savePath(_alloc)
  {
  }

  typedef uint8_t _startRecording_type;
  uint8_t startRecording;

  typedef uint8_t _stopRecording_type;
  uint8_t stopRecording;

  typedef uint8_t _saveRecording_type;
  uint8_t saveRecording;

  typedef uint8_t _clearRecording_type;
  uint8_t clearRecording;

  typedef uint8_t _successful_type;
  uint8_t successful;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _savePath_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  savePath;


  typedef boost::shared_ptr< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RecordingExecutionCommands
typedef  ::core_communication_msgs::RecordingExecutionCommands_<std::allocator<void> > RecordingExecutionCommands;

typedef boost::shared_ptr< ::core_communication_msgs::RecordingExecutionCommands> RecordingExecutionCommandsPtr;
typedef boost::shared_ptr< ::core_communication_msgs::RecordingExecutionCommands const> RecordingExecutionCommandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "454a1b04aa982338dd07615b88fe3c3a";
  }

  static const char* value(const  ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x454a1b04aa982338ULL;
  static const uint64_t static_value2 = 0xdd07615b88fe3c3aULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/RecordingExecutionCommands";
  }

  static const char* value(const  ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool startRecording\n\
bool stopRecording\n\
bool saveRecording\n\
bool clearRecording\n\
bool successful\n\
string savePath\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.startRecording);
    stream.next(m.stopRecording);
    stream.next(m.saveRecording);
    stream.next(m.clearRecording);
    stream.next(m.successful);
    stream.next(m.savePath);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RecordingExecutionCommands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::RecordingExecutionCommands_<ContainerAllocator> & v) 
  {
    s << indent << "startRecording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.startRecording);
    s << indent << "stopRecording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stopRecording);
    s << indent << "saveRecording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.saveRecording);
    s << indent << "clearRecording: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clearRecording);
    s << indent << "successful: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.successful);
    s << indent << "savePath: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.savePath);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_RECORDINGEXECUTIONCOMMANDS_H

