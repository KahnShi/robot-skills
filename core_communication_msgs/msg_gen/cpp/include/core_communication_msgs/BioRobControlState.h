/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/BioRobControlState.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBCONTROLSTATE_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBCONTROLSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "core_communication_msgs/ControlError.h"

namespace core_communication_msgs
{
template <class ContainerAllocator>
struct BioRobControlState_ {
  typedef BioRobControlState_<ContainerAllocator> Type;

  BioRobControlState_()
  : header()
  , control_signal_voltages()
  , control_signal_torques()
  , joint_position_error()
  , joint_velocity_error()
  , cartesian_position_error(0.0)
  , cartesian_orientation_error(0.0)
  , cartesian_position_error_next_way_point(0.0)
  , cartesian_orientation_error_next_way_point(0.0)
  , errors()
  {
  }

  BioRobControlState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , control_signal_voltages(_alloc)
  , control_signal_torques(_alloc)
  , joint_position_error(_alloc)
  , joint_velocity_error(_alloc)
  , cartesian_position_error(0.0)
  , cartesian_orientation_error(0.0)
  , cartesian_position_error_next_way_point(0.0)
  , cartesian_orientation_error_next_way_point(0.0)
  , errors(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _control_signal_voltages_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  control_signal_voltages;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _control_signal_torques_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  control_signal_torques;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_position_error_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  joint_position_error;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_velocity_error_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  joint_velocity_error;

  typedef double _cartesian_position_error_type;
  double cartesian_position_error;

  typedef double _cartesian_orientation_error_type;
  double cartesian_orientation_error;

  typedef double _cartesian_position_error_next_way_point_type;
  double cartesian_position_error_next_way_point;

  typedef double _cartesian_orientation_error_next_way_point_type;
  double cartesian_orientation_error_next_way_point;

  typedef std::vector< ::core_communication_msgs::ControlError_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::ControlError_<ContainerAllocator> >::other >  _errors_type;
  std::vector< ::core_communication_msgs::ControlError_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::ControlError_<ContainerAllocator> >::other >  errors;


  typedef boost::shared_ptr< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::BioRobControlState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BioRobControlState
typedef  ::core_communication_msgs::BioRobControlState_<std::allocator<void> > BioRobControlState;

typedef boost::shared_ptr< ::core_communication_msgs::BioRobControlState> BioRobControlStatePtr;
typedef boost::shared_ptr< ::core_communication_msgs::BioRobControlState const> BioRobControlStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::BioRobControlState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobControlState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cebeda6703b00559ecb169b5b73a56a5";
  }

  static const char* value(const  ::core_communication_msgs::BioRobControlState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcebeda6703b00559ULL;
  static const uint64_t static_value2 = 0xecb169b5b73a56a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/BioRobControlState";
  }

  static const char* value(const  ::core_communication_msgs::BioRobControlState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "std_msgs/Header header\n\
float64[] control_signal_voltages\n\
float64[] control_signal_torques\n\
float64[] joint_position_error\n\
float64[] joint_velocity_error\n\
float64 cartesian_position_error\n\
float64 cartesian_orientation_error\n\
float64 cartesian_position_error_next_way_point\n\
float64 cartesian_orientation_error_next_way_point\n\
ControlError[] errors\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/ControlError\n\
string name\n\
string description\n\
float64[] values\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::BioRobControlState_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.control_signal_voltages);
    stream.next(m.control_signal_torques);
    stream.next(m.joint_position_error);
    stream.next(m.joint_velocity_error);
    stream.next(m.cartesian_position_error);
    stream.next(m.cartesian_orientation_error);
    stream.next(m.cartesian_position_error_next_way_point);
    stream.next(m.cartesian_orientation_error_next_way_point);
    stream.next(m.errors);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BioRobControlState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::BioRobControlState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::BioRobControlState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control_signal_voltages[]" << std::endl;
    for (size_t i = 0; i < v.control_signal_voltages.size(); ++i)
    {
      s << indent << "  control_signal_voltages[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.control_signal_voltages[i]);
    }
    s << indent << "control_signal_torques[]" << std::endl;
    for (size_t i = 0; i < v.control_signal_torques.size(); ++i)
    {
      s << indent << "  control_signal_torques[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.control_signal_torques[i]);
    }
    s << indent << "joint_position_error[]" << std::endl;
    for (size_t i = 0; i < v.joint_position_error.size(); ++i)
    {
      s << indent << "  joint_position_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_position_error[i]);
    }
    s << indent << "joint_velocity_error[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocity_error.size(); ++i)
    {
      s << indent << "  joint_velocity_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocity_error[i]);
    }
    s << indent << "cartesian_position_error: ";
    Printer<double>::stream(s, indent + "  ", v.cartesian_position_error);
    s << indent << "cartesian_orientation_error: ";
    Printer<double>::stream(s, indent + "  ", v.cartesian_orientation_error);
    s << indent << "cartesian_position_error_next_way_point: ";
    Printer<double>::stream(s, indent + "  ", v.cartesian_position_error_next_way_point);
    s << indent << "cartesian_orientation_error_next_way_point: ";
    Printer<double>::stream(s, indent + "  ", v.cartesian_orientation_error_next_way_point);
    s << indent << "errors[]" << std::endl;
    for (size_t i = 0; i < v.errors.size(); ++i)
    {
      s << indent << "  errors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::core_communication_msgs::ControlError_<ContainerAllocator> >::stream(s, indent + "    ", v.errors[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBCONTROLSTATE_H

