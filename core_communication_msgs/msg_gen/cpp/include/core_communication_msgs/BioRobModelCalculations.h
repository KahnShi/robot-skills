/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/BioRobModelCalculations.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBMODELCALCULATIONS_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBMODELCALCULATIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace core_communication_msgs
{
template <class ContainerAllocator>
struct BioRobModelCalculations_ {
  typedef BioRobModelCalculations_<ContainerAllocator> Type;

  BioRobModelCalculations_()
  : header()
  , gravity_vector_torque()
  , coriolis_vector_torque()
  , mass_matrix_mult_with_acc_torque()
  , inverse_dynamics_torque()
  , direct_dynamics_acc()
  {
  }

  BioRobModelCalculations_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , gravity_vector_torque(_alloc)
  , coriolis_vector_torque(_alloc)
  , mass_matrix_mult_with_acc_torque(_alloc)
  , inverse_dynamics_torque(_alloc)
  , direct_dynamics_acc(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _gravity_vector_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  gravity_vector_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _coriolis_vector_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  coriolis_vector_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _mass_matrix_mult_with_acc_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  mass_matrix_mult_with_acc_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _inverse_dynamics_torque_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  inverse_dynamics_torque;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _direct_dynamics_acc_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  direct_dynamics_acc;


  typedef boost::shared_ptr< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BioRobModelCalculations
typedef  ::core_communication_msgs::BioRobModelCalculations_<std::allocator<void> > BioRobModelCalculations;

typedef boost::shared_ptr< ::core_communication_msgs::BioRobModelCalculations> BioRobModelCalculationsPtr;
typedef boost::shared_ptr< ::core_communication_msgs::BioRobModelCalculations const> BioRobModelCalculationsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6613ba46b603b7a075f5b7b5f1831f47";
  }

  static const char* value(const  ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6613ba46b603b7a0ULL;
  static const uint64_t static_value2 = 0x75f5b7b5f1831f47ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/BioRobModelCalculations";
  }

  static const char* value(const  ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float64[] gravity_vector_torque\n\
float64[] coriolis_vector_torque\n\
float64[] mass_matrix_mult_with_acc_torque\n\
float64[] inverse_dynamics_torque\n\
float64[] direct_dynamics_acc\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.gravity_vector_torque);
    stream.next(m.coriolis_vector_torque);
    stream.next(m.mass_matrix_mult_with_acc_torque);
    stream.next(m.inverse_dynamics_torque);
    stream.next(m.direct_dynamics_acc);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BioRobModelCalculations_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::BioRobModelCalculations_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gravity_vector_torque[]" << std::endl;
    for (size_t i = 0; i < v.gravity_vector_torque.size(); ++i)
    {
      s << indent << "  gravity_vector_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gravity_vector_torque[i]);
    }
    s << indent << "coriolis_vector_torque[]" << std::endl;
    for (size_t i = 0; i < v.coriolis_vector_torque.size(); ++i)
    {
      s << indent << "  coriolis_vector_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coriolis_vector_torque[i]);
    }
    s << indent << "mass_matrix_mult_with_acc_torque[]" << std::endl;
    for (size_t i = 0; i < v.mass_matrix_mult_with_acc_torque.size(); ++i)
    {
      s << indent << "  mass_matrix_mult_with_acc_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.mass_matrix_mult_with_acc_torque[i]);
    }
    s << indent << "inverse_dynamics_torque[]" << std::endl;
    for (size_t i = 0; i < v.inverse_dynamics_torque.size(); ++i)
    {
      s << indent << "  inverse_dynamics_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.inverse_dynamics_torque[i]);
    }
    s << indent << "direct_dynamics_acc[]" << std::endl;
    for (size_t i = 0; i < v.direct_dynamics_acc.size(); ++i)
    {
      s << indent << "  direct_dynamics_acc[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.direct_dynamics_acc[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBMODELCALCULATIONS_H

