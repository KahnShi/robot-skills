/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/TrajectoryExecutionCommands.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_TRAJECTORYEXECUTIONCOMMANDS_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_TRAJECTORYEXECUTIONCOMMANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct TrajectoryExecutionCommands_ {
  typedef TrajectoryExecutionCommands_<ContainerAllocator> Type;

  TrajectoryExecutionCommands_()
  : startTrajectory(false)
  , stopTrajectory(false)
  , finishTrajectory(false)
  , pauseTrajectory(false)
  , resumeTrajectory(false)
  , clearTrajectory(false)
  , finishGripperAction(false)
  {
  }

  TrajectoryExecutionCommands_(const ContainerAllocator& _alloc)
  : startTrajectory(false)
  , stopTrajectory(false)
  , finishTrajectory(false)
  , pauseTrajectory(false)
  , resumeTrajectory(false)
  , clearTrajectory(false)
  , finishGripperAction(false)
  {
  }

  typedef uint8_t _startTrajectory_type;
  uint8_t startTrajectory;

  typedef uint8_t _stopTrajectory_type;
  uint8_t stopTrajectory;

  typedef uint8_t _finishTrajectory_type;
  uint8_t finishTrajectory;

  typedef uint8_t _pauseTrajectory_type;
  uint8_t pauseTrajectory;

  typedef uint8_t _resumeTrajectory_type;
  uint8_t resumeTrajectory;

  typedef uint8_t _clearTrajectory_type;
  uint8_t clearTrajectory;

  typedef uint8_t _finishGripperAction_type;
  uint8_t finishGripperAction;


  typedef boost::shared_ptr< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TrajectoryExecutionCommands
typedef  ::core_communication_msgs::TrajectoryExecutionCommands_<std::allocator<void> > TrajectoryExecutionCommands;

typedef boost::shared_ptr< ::core_communication_msgs::TrajectoryExecutionCommands> TrajectoryExecutionCommandsPtr;
typedef boost::shared_ptr< ::core_communication_msgs::TrajectoryExecutionCommands const> TrajectoryExecutionCommandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b55c94def99dd4364b97dc409a619b4";
  }

  static const char* value(const  ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2b55c94def99dd43ULL;
  static const uint64_t static_value2 = 0x64b97dc409a619b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/TrajectoryExecutionCommands";
  }

  static const char* value(const  ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool startTrajectory\n\
bool stopTrajectory\n\
bool finishTrajectory\n\
bool pauseTrajectory\n\
bool resumeTrajectory\n\
bool clearTrajectory\n\
bool finishGripperAction\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.startTrajectory);
    stream.next(m.stopTrajectory);
    stream.next(m.finishTrajectory);
    stream.next(m.pauseTrajectory);
    stream.next(m.resumeTrajectory);
    stream.next(m.clearTrajectory);
    stream.next(m.finishGripperAction);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TrajectoryExecutionCommands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::TrajectoryExecutionCommands_<ContainerAllocator> & v) 
  {
    s << indent << "startTrajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.startTrajectory);
    s << indent << "stopTrajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stopTrajectory);
    s << indent << "finishTrajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finishTrajectory);
    s << indent << "pauseTrajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pauseTrajectory);
    s << indent << "resumeTrajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.resumeTrajectory);
    s << indent << "clearTrajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clearTrajectory);
    s << indent << "finishGripperAction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finishGripperAction);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_TRAJECTORYEXECUTIONCOMMANDS_H

