/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/BioRobJointTrajectoryPoint.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBJOINTTRAJECTORYPOINT_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBJOINTTRAJECTORYPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "trajectory_msgs/JointTrajectoryPoint.h"
#include "core_communication_msgs/GripperAction.h"

namespace core_communication_msgs
{
template <class ContainerAllocator>
struct BioRobJointTrajectoryPoint_ {
  typedef BioRobJointTrajectoryPoint_<ContainerAllocator> Type;

  BioRobJointTrajectoryPoint_()
  : trajectoryPoint()
  , gripperAction()
  , reachingAccuracyCart(0.0)
  , reachingAccuracyOrient(0.0)
  , reachingAccuracyJoint(0.0)
  , controlLoopRatio(0.0)
  {
  }

  BioRobJointTrajectoryPoint_(const ContainerAllocator& _alloc)
  : trajectoryPoint(_alloc)
  , gripperAction(_alloc)
  , reachingAccuracyCart(0.0)
  , reachingAccuracyOrient(0.0)
  , reachingAccuracyJoint(0.0)
  , controlLoopRatio(0.0)
  {
  }

  typedef  ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  _trajectoryPoint_type;
   ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator>  trajectoryPoint;

  typedef  ::core_communication_msgs::GripperAction_<ContainerAllocator>  _gripperAction_type;
   ::core_communication_msgs::GripperAction_<ContainerAllocator>  gripperAction;

  typedef double _reachingAccuracyCart_type;
  double reachingAccuracyCart;

  typedef double _reachingAccuracyOrient_type;
  double reachingAccuracyOrient;

  typedef double _reachingAccuracyJoint_type;
  double reachingAccuracyJoint;

  typedef double _controlLoopRatio_type;
  double controlLoopRatio;


  typedef boost::shared_ptr< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BioRobJointTrajectoryPoint
typedef  ::core_communication_msgs::BioRobJointTrajectoryPoint_<std::allocator<void> > BioRobJointTrajectoryPoint;

typedef boost::shared_ptr< ::core_communication_msgs::BioRobJointTrajectoryPoint> BioRobJointTrajectoryPointPtr;
typedef boost::shared_ptr< ::core_communication_msgs::BioRobJointTrajectoryPoint const> BioRobJointTrajectoryPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "98a8e34183deadfd954fa698cebd99d1";
  }

  static const char* value(const  ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x98a8e34183deadfdULL;
  static const uint64_t static_value2 = 0x954fa698cebd99d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/BioRobJointTrajectoryPoint";
  }

  static const char* value(const  ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "trajectory_msgs/JointTrajectoryPoint trajectoryPoint\n\
GripperAction gripperAction\n\
float64 reachingAccuracyCart\n\
float64 reachingAccuracyOrient\n\
float64 reachingAccuracyJoint\n\
float64 controlLoopRatio\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
================================================================================\n\
MSG: core_communication_msgs/GripperAction\n\
float64 absolutePosition\n\
bool absPosIsSet\n\
bool closeGripper\n\
float64 noMovementTimeout\n\
bool openGripper\n\
bool useCustomNoMovementTimeout\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.trajectoryPoint);
    stream.next(m.gripperAction);
    stream.next(m.reachingAccuracyCart);
    stream.next(m.reachingAccuracyOrient);
    stream.next(m.reachingAccuracyJoint);
    stream.next(m.controlLoopRatio);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BioRobJointTrajectoryPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::BioRobJointTrajectoryPoint_<ContainerAllocator> & v) 
  {
    s << indent << "trajectoryPoint: ";
s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectoryPoint);
    s << indent << "gripperAction: ";
s << std::endl;
    Printer< ::core_communication_msgs::GripperAction_<ContainerAllocator> >::stream(s, indent + "  ", v.gripperAction);
    s << indent << "reachingAccuracyCart: ";
    Printer<double>::stream(s, indent + "  ", v.reachingAccuracyCart);
    s << indent << "reachingAccuracyOrient: ";
    Printer<double>::stream(s, indent + "  ", v.reachingAccuracyOrient);
    s << indent << "reachingAccuracyJoint: ";
    Printer<double>::stream(s, indent + "  ", v.reachingAccuracyJoint);
    s << indent << "controlLoopRatio: ";
    Printer<double>::stream(s, indent + "  ", v.controlLoopRatio);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_BIOROBJOINTTRAJECTORYPOINT_H

