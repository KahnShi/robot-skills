/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/ProcessExecutionCommands.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_PROCESSEXECUTIONCOMMANDS_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_PROCESSEXECUTIONCOMMANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct ProcessExecutionCommands_ {
  typedef ProcessExecutionCommands_<ContainerAllocator> Type;

  ProcessExecutionCommands_()
  : repeat(false)
  , process()
  , proceed_when_gui_inactive(false)
  , pause_process(false)
  , resume_process(false)
  , start_process(false)
  , stop_process(false)
  {
  }

  ProcessExecutionCommands_(const ContainerAllocator& _alloc)
  : repeat(false)
  , process(_alloc)
  , proceed_when_gui_inactive(false)
  , pause_process(false)
  , resume_process(false)
  , start_process(false)
  , stop_process(false)
  {
  }

  typedef uint8_t _repeat_type;
  uint8_t repeat;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _process_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  process;

  typedef uint8_t _proceed_when_gui_inactive_type;
  uint8_t proceed_when_gui_inactive;

  typedef uint8_t _pause_process_type;
  uint8_t pause_process;

  typedef uint8_t _resume_process_type;
  uint8_t resume_process;

  typedef uint8_t _start_process_type;
  uint8_t start_process;

  typedef uint8_t _stop_process_type;
  uint8_t stop_process;


  typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ProcessExecutionCommands
typedef  ::core_communication_msgs::ProcessExecutionCommands_<std::allocator<void> > ProcessExecutionCommands;

typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionCommands> ProcessExecutionCommandsPtr;
typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionCommands const> ProcessExecutionCommandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "366f8279ab1970f7c58efde097543c71";
  }

  static const char* value(const  ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x366f8279ab1970f7ULL;
  static const uint64_t static_value2 = 0xc58efde097543c71ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/ProcessExecutionCommands";
  }

  static const char* value(const  ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool repeat\n\
string process\n\
bool proceed_when_gui_inactive\n\
bool pause_process\n\
bool resume_process\n\
bool start_process\n\
bool stop_process\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.repeat);
    stream.next(m.process);
    stream.next(m.proceed_when_gui_inactive);
    stream.next(m.pause_process);
    stream.next(m.resume_process);
    stream.next(m.start_process);
    stream.next(m.stop_process);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ProcessExecutionCommands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::ProcessExecutionCommands_<ContainerAllocator> & v) 
  {
    s << indent << "repeat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.repeat);
    s << indent << "process: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.process);
    s << indent << "proceed_when_gui_inactive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.proceed_when_gui_inactive);
    s << indent << "pause_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pause_process);
    s << indent << "resume_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.resume_process);
    s << indent << "start_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_process);
    s << indent << "stop_process: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_process);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_PROCESSEXECUTIONCOMMANDS_H

