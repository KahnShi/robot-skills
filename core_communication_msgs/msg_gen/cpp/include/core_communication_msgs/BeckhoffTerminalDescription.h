/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/BeckhoffTerminalDescription.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFTERMINALDESCRIPTION_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFTERMINALDESCRIPTION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "core_communication_msgs/BeckhoffPortDescription.h"

namespace core_communication_msgs
{
template <class ContainerAllocator>
struct BeckhoffTerminalDescription_ {
  typedef BeckhoffTerminalDescription_<ContainerAllocator> Type;

  BeckhoffTerminalDescription_()
  : terminal()
  , position(0)
  , num_ports(0)
  , ports()
  {
  }

  BeckhoffTerminalDescription_(const ContainerAllocator& _alloc)
  : terminal(_alloc)
  , position(0)
  , num_ports(0)
  , ports(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _terminal_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  terminal;

  typedef uint32_t _position_type;
  uint32_t position;

  typedef uint8_t _num_ports_type;
  uint8_t num_ports;

  typedef std::vector< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> >::other >  _ports_type;
  std::vector< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> >::other >  ports;


  typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct BeckhoffTerminalDescription
typedef  ::core_communication_msgs::BeckhoffTerminalDescription_<std::allocator<void> > BeckhoffTerminalDescription;

typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffTerminalDescription> BeckhoffTerminalDescriptionPtr;
typedef boost::shared_ptr< ::core_communication_msgs::BeckhoffTerminalDescription const> BeckhoffTerminalDescriptionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "59e7de013f74774a93c0a1dafb1d6c9b";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x59e7de013f74774aULL;
  static const uint64_t static_value2 = 0x93c0a1dafb1d6c9bULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/BeckhoffTerminalDescription";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string terminal # terminal type\n\
uint32 position # relative position of the terminal in the EtherCAT bus (0-n)\n\
uint8 num_ports # number of ports on the terminal (0-n)\n\
BeckhoffPortDescription[] ports # port descriptions\n\
\n\
================================================================================\n\
MSG: core_communication_msgs/BeckhoffPortDescription\n\
uint8 index\n\
string direction # 'in','out'\n\
string type # 'digital';'analog'\n\
string data_type # 'uint8' 'uint16' 'uint32' 'uint64'\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.terminal);
    stream.next(m.position);
    stream.next(m.num_ports);
    stream.next(m.ports);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct BeckhoffTerminalDescription_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::BeckhoffTerminalDescription_<ContainerAllocator> & v) 
  {
    s << indent << "terminal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.terminal);
    s << indent << "position: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position);
    s << indent << "num_ports: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_ports);
    s << indent << "ports[]" << std::endl;
    for (size_t i = 0; i < v.ports.size(); ++i)
    {
      s << indent << "  ports[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::core_communication_msgs::BeckhoffPortDescription_<ContainerAllocator> >::stream(s, indent + "    ", v.ports[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_BECKHOFFTERMINALDESCRIPTION_H

