/* Auto-generated by genmsg_cpp for file /home/biorob/rosstacks/core_dev/core_communication_msgs/msg/ProcessExecutionState.msg */
#ifndef CORE_COMMUNICATION_MSGS_MESSAGE_PROCESSEXECUTIONSTATE_H
#define CORE_COMMUNICATION_MSGS_MESSAGE_PROCESSEXECUTIONSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace core_communication_msgs
{
template <class ContainerAllocator>
struct ProcessExecutionState_ {
  typedef ProcessExecutionState_<ContainerAllocator> Type;

  ProcessExecutionState_()
  : process_paused(false)
  , process_running(false)
  , process_finished(false)
  {
  }

  ProcessExecutionState_(const ContainerAllocator& _alloc)
  : process_paused(false)
  , process_running(false)
  , process_finished(false)
  {
  }

  typedef uint8_t _process_paused_type;
  uint8_t process_paused;

  typedef uint8_t _process_running_type;
  uint8_t process_running;

  typedef uint8_t _process_finished_type;
  uint8_t process_finished;


  typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ProcessExecutionState
typedef  ::core_communication_msgs::ProcessExecutionState_<std::allocator<void> > ProcessExecutionState;

typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionState> ProcessExecutionStatePtr;
typedef boost::shared_ptr< ::core_communication_msgs::ProcessExecutionState const> ProcessExecutionStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace core_communication_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "062eedcbddf675783ad1802e7ee31590";
  }

  static const char* value(const  ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x062eedcbddf67578ULL;
  static const uint64_t static_value2 = 0x3ad1802e7ee31590ULL;
};

template<class ContainerAllocator>
struct DataType< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "core_communication_msgs/ProcessExecutionState";
  }

  static const char* value(const  ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool process_paused\n\
bool process_running\n\
bool process_finished\n\
\n\
";
  }

  static const char* value(const  ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.process_paused);
    stream.next(m.process_running);
    stream.next(m.process_finished);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ProcessExecutionState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::core_communication_msgs::ProcessExecutionState_<ContainerAllocator> & v) 
  {
    s << indent << "process_paused: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.process_paused);
    s << indent << "process_running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.process_running);
    s << indent << "process_finished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.process_finished);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CORE_COMMUNICATION_MSGS_MESSAGE_PROCESSEXECUTIONSTATE_H

